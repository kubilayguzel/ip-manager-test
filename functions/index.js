// functions/index.js
const functions = require('firebase-functions');
const cors = require('cors');
const fetch = require('node-fetch');
const admin = require('firebase-admin');
const { Storage } = require("@google-cloud/storage");
const storage = new Storage();
const path = require("path");
const os = require("os");
const fs = require("fs");
const AdmZip = require("adm-zip");
const { createExtractorFromFile } = require("node-unrar-js");
const { google } = require("googleapis");
const { GoogleAuth } = require("google-auth-library");
const nodemailer = require("nodemailer");

if (!admin.apps.length) {
  admin.initializeApp();
}
const db = admin.firestore();

// CORS ayarlarƒ± - sadece kendi domain'inizden gelen istekleri kabul et
const corsOptions = {
    origin: [
        'https://kubilayguzel.github.io',
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://localhost:5173' // Vite dev server
    ],
    credentials: true,
    optionsSuccessStatus: 200
};

const corsHandler = cors(corsOptions);

// ETEBS API Proxy Function
exports.etebsProxy = functions
    .region('europe-west1') // En yakƒ±n region se√ßin
    .runWith({
        timeoutSeconds: 120, // 2 dakika timeout
        memory: '256MB'
    })
    .https.onRequest((req, res) => {
        return corsHandler(req, res, async () => {
            // Sadece POST isteklerini kabul et
            if (req.method !== 'POST') {
                return res.status(405).json({ 
                    success: false,
                    error: 'Method not allowed' 
                });
            }

            try {
                console.log('üî• ETEBS Proxy request:', req.body);
                
                const { action, token, documentNo } = req.body;

                // Gerekli parametreleri kontrol et
                if (!action || !token) {
                    return res.status(400).json({
                        success: false,
                        error: 'Missing required parameters'
                    });
                }

                // ETEBS API endpoint'ini belirle
                let apiUrl = '';
                let requestBody = { TOKEN: token };

                switch (action) {
                    case 'daily-notifications':
                        apiUrl = 'https://epats.turkpatent.gov.tr/service/TP/DAILY_NOTIFICATIONS?apikey=etebs';
                        break;
                    
                    case 'download-document':
                        if (!documentNo) {
                            return res.status(400).json({
                                success: false,
                                error: 'Document number required for download'
                            });
                        }
                        apiUrl = 'https://epats.turkpatent.gov.tr/service/TP/DOWNLOAD_DOCUMENT?apikey=etebs';
                        requestBody.DOCUMENT_NO = documentNo;
                        break;
                    
                    default:
                        return res.status(400).json({
                            success: false,
                            error: 'Invalid action'
                        });
                }

                console.log('üì° ETEBS API call:', apiUrl);

                // ETEBS API'sine istek g√∂nder
                const etebsResponse = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'User-Agent': 'IP-Manager-ETEBS-Proxy/1.0'
                    },
                    body: JSON.stringify(requestBody),
                    timeout: 30000 // 30 saniye timeout
                });

                if (!etebsResponse.ok) {
                    throw new Error(`ETEBS API HTTP ${etebsResponse.status}: ${etebsResponse.statusText}`);
                }

                const etebsData = await etebsResponse.json();
                
                console.log('‚úÖ ETEBS API response received');

                // ETEBS response'unu frontend'e d√∂nd√ºr
                res.json({
                    success: true,
                    data: etebsData,
                    timestamp: new Date().toISOString()
                });

            } catch (error) {
                console.error('‚ùå ETEBS Proxy Error:', error);
                
                // Hata t√ºr√ºne g√∂re response
                if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
                    res.status(503).json({
                        success: false,
                        error: 'ETEBS service unavailable',
                        code: 'SERVICE_UNAVAILABLE'
                    });
                } else if (error.name === 'AbortError') {
                    res.status(408).json({
                        success: false,
                        error: 'Request timeout',
                        code: 'TIMEOUT'
                    });
                } else {
                    res.status(500).json({
                        success: false,
                        error: 'Internal proxy error',
                        code: 'PROXY_ERROR',
                        message: process.env.NODE_ENV === 'development' ? error.message : undefined
                    });
                }
            }
        });
    });

// Health Check Function
exports.etebsProxyHealth = functions
    .region('europe-west1')
    .https.onRequest((req, res) => {
        return corsHandler(req, res, () => {
            res.json({
                status: 'healthy',
                service: 'ETEBS Proxy',
                timestamp: new Date().toISOString(),
                version: '1.0.0'
            });
        });
    });

// ETEBS Token Validation Function
exports.validateEtebsToken = functions
    .region('europe-west1')
    .https.onRequest((req, res) => {
        return corsHandler(req, res, () => {
            if (req.method !== 'POST') {
                return res.status(405).json({ error: 'Method not allowed' });
            }

            const { token } = req.body;
            
            if (!token) {
                return res.status(400).json({
                    valid: false,
                    error: 'Token required'
                });
            }

            // GUID format validation
            const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
            
            if (!guidRegex.test(token)) {
                return res.status(400).json({
                    valid: false,
                    error: 'Invalid token format'
                });
            }

            res.json({
                valid: true,
                format: 'GUID',
                timestamp: new Date().toISOString()
            });
        });
    });

// Rate Limiting Function (Scheduled)
exports.cleanupEtebsLogs = functions
    .region('europe-west1')
    .pubsub.schedule('every 24 hours')
    .onRun(async (context) => {
        console.log('üßπ ETEBS logs cleanup started');
        
        // Firestore'dan eski loglarƒ± temizle
        const admin = require('firebase-admin');
        if (!admin.apps.length) {
            admin.initializeApp();
        }

        const db = admin.firestore();
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

        try {
            const oldLogs = await db.collection('etebs_logs')
                .where('timestamp', '<', thirtyDaysAgo)
                .limit(500)
                .get();

            const batch = db.batch();
            oldLogs.docs.forEach(doc => {
                batch.delete(doc.ref);
            });

            await batch.commit();
            
            console.log(`üóëÔ∏è Cleaned up ${oldLogs.docs.length} old ETEBS logs`);
        } catch (error) {
            console.error('‚ùå Cleanup error:', error);
        }

        return null;
    });

console.log('üî• ETEBS Proxy Functions loaded');

// --- YENƒ∞ EKLENEN E-POSTA Bƒ∞LDƒ∞Rƒ∞M FONKSƒ∞YONU ---

/**
 * 'indexed_documents' koleksiyonuna yeni bir belge eklendiƒüinde tetiklenir.
 * Doƒüru mail ≈üablonunu bulur, verilerle doldurur ve 'mail_notifications'
 * koleksiyonuna g√∂nderilmek √ºzere yeni bir kayƒ±t ekler.
 */
exports.createMailNotificationOnDocumentIndex = functions.firestore
  .document("indexed_documents/{docId}")
  .onCreate(async (snap, context) => {
    const newDocument = snap.data();
    console.log(`Yeni belge algƒ±landƒ±: ${context.params.docId}`, newDocument);

    const db = admin.firestore();
    let missingFields = [];
    let rule = null;
    let template = null;
    let client = null;
    let subject = "";
    let body = "";
    let status = "pending";

    try {
      // 1Ô∏è‚É£ Kuralƒ± bul
      const rulesSnapshot = await db.collection("template_rules")
        .where("sourceType", "==", "document")
        .where("mainProcessType", "==", newDocument.mainProcessType)
        .where("subProcessType", "==", newDocument.subProcessType)
        .limit(1)
        .get();

      if (rulesSnapshot.empty) {
        console.warn("Kural bulunamadƒ±.");
        missingFields.push("templateRule");
      } else {
        rule = rulesSnapshot.docs[0].data();
      }

      // 2Ô∏è‚É£ ≈ûablonu bul
      if (rule) {
        const templateSnapshot = await db.collection("mail_templates").doc(rule.templateId).get();
        if (!templateSnapshot.exists) {
          console.warn(`≈ûablon bulunamadƒ±: ${rule.templateId}`);
          missingFields.push("mailTemplate");
        } else {
          template = templateSnapshot.data();
        }
      }

      // 3Ô∏è‚É£ M√ºvekkil bilgilerini al
      if (newDocument.clientId) {
        const clientSnapshot = await db.collection("clients").doc(newDocument.clientId).get();
        if (!clientSnapshot.exists) {
          console.warn(`M√ºvekkil bulunamadƒ±: ${newDocument.clientId}`);
          missingFields.push("client");
        } else {
          client = clientSnapshot.data();
        }
      } else {
        console.warn("clientId eksik.");
        missingFields.push("clientId");
      }

      // 4Ô∏è‚É£ Parametreleri doldur
      if (template && client) {
        subject = template.subject;
        body = template.body;

        const parameters = { ...client, ...newDocument };

        for (const key in parameters) {
          const placeholder = new RegExp(`{{${key}}}`, "g");
          subject = subject.replace(placeholder, parameters[key]);
          body = body.replace(placeholder, parameters[key]);
        }

        if (!client.email) {
          missingFields.push("recipientEmail");
        }
        if (!subject) {
          missingFields.push("subject");
        }
        if (!body) {
          missingFields.push("body");
        }
      } else {
        subject = "Eksik Bilgi: Bildirim Tamamlanamadƒ±";
        body = "Bu bildirim olu≈üturuldu ancak g√∂nderim i√ßin eksik bilgiler mevcut. L√ºtfen tamamlayƒ±n.";
      }

      // 5Ô∏è‚É£ Durumu belirle
      if (missingFields.length > 0) {
        status = "missing_info";
      }

      // 6Ô∏è‚É£ Bildirimi olu≈ütur
      const notificationData = {
        recipientEmail: client?.email || null,
        clientId: newDocument.clientId || null,
        subject: subject,
        body: body,
        status: status,
        missingFields: missingFields, // üéØ yeni alan
        sourceDocumentId: context.params.docId,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      };

      await db.collection("mail_notifications").add(notificationData);
      console.log(`Mail bildirimi '${status}' olarak olu≈üturuldu.`);

      return null;

    } catch (error) {
      console.error("Mail bildirimi olu≈üturulurken hata:", error);
      return null;
    }
  });

  // --- YENƒ∞ EKLENEN √áAƒûRILABƒ∞Lƒ∞R E-POSTA G√ñNDERME FONKSƒ∞YONU ---
// Gmail API i√ßin gerekli yetki kapsamƒ±
const GMAIL_SCOPES = ["https://www.googleapis.com/auth/gmail.send"];

/**
 * √ñn y√ºzden √ßaƒürƒ±larak 'mail_notifications' koleksiyonundaki bir bildirimi
 * Gmail API √ºzerinden g√∂nderir.
 */

exports.createMailNotificationOnDocumentStatusChange = functions.firestore
  .document("unindexed_pdfs/{docId}")
  .onUpdate(async (change, context) => {
    const before = change.before.data();
    const after = change.after.data();

    if (before.status !== 'indexed' && after.status === 'indexed') {
      console.log(`Belge indexlendi: ${context.params.docId}`, after);

      const db = admin.firestore();

      let rule = null;
      let template = null;
      let client = null;
      let status = "pending";
      let subject = "";
      let body = "";

      try {
        // ≈ûablon kuralƒ±nƒ± bul
        const rulesSnapshot = await db.collection("template_rules")
          .where("sourceType", "==", "document")
          .where("mainProcessType", "==", after.mainProcessType)
          .where("subProcessType", "==", after.subProcessType)
          .limit(1)
          .get();

        if (rulesSnapshot.empty) {
          console.warn("Kural bulunamadƒ±, eksik bilgi bildirimi olu≈üturulacak.");
          status = "missing_info";
        } else {
          rule = rulesSnapshot.docs[0].data();
          console.log(`Kural bulundu. ≈ûablon ID: ${rule.templateId}`);

          // Mail ≈ûablonunu al
          const templateSnapshot = await db.collection("mail_templates").doc(rule.templateId).get();
          if (!templateSnapshot.exists) {
            console.warn(`≈ûablon bulunamadƒ±: ${rule.templateId}`);
            status = "missing_info";
          } else {
            template = templateSnapshot.data();
          }
        }

        // M√ºvekkil bilgilerini al
        if (after.clientId) {
          const clientSnapshot = await db.collection("persons").doc(after.clientId).get();
          if (!clientSnapshot.exists) {
            console.warn(`M√ºvekkil bulunamadƒ±: ${after.clientId}`);
            status = "missing_info";
          } else {
            client = clientSnapshot.data();
          }
        } else {
          console.warn("clientId alanƒ± eksik.");
          status = "missing_info";
        }

        // Parametreleri doldur (sadece her ≈üey tamamsa)
        if (status === "pending" && template && client) {
          subject = template.subject;
          body = template.body;

          const parameters = { ...client, ...after };
          for (const key in parameters) {
            const placeholder = new RegExp(`{{${key}}}`, "g");
            subject = subject.replace(placeholder, parameters[key]);
            body = body.replace(placeholder, parameters[key]);
          }
        } else {
          subject = "Eksik Bilgi: Bildirim Tamamlanamadƒ±";
          body = "Bu bildirim olu≈üturuldu ancak g√∂nderim i√ßin eksik bilgiler mevcut. L√ºtfen eksiklikleri giderin.";
        }

        // Bildirimi olu≈ütur
        const missingFields = [];
        if (!client || !client.email) missingFields.push('recipientEmail');
        if (!after.clientId) missingFields.push('clientId');
        if (!template) missingFields.push('template');

        const notificationData = {
          recipientEmail: client?.email || null,
          clientId: after.clientId || null,
          subject: subject,
          body: body,
          status: status, // "pending" veya "missing_info"
          missingFields: missingFields, // EKLENDƒ∞!
          sourceDocumentId: context.params.docId,
          createdAt: admin.firestore.FieldValue.serverTimestamp(),
          updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        };

        await db.collection("mail_notifications").add(notificationData);
        console.log(`Mail bildirimi '${status}' olarak olu≈üturuldu.`);
        return null;

      } catch (error) {
        console.error("Bildirim olu≈üturulurken hata:", error);
        return null;
      }
    } else {
      console.log("Status deƒüi≈üimi indekslenme deƒüil, i≈ülem atlandƒ±.");
      return null;
    }
  });

/**
 * Bir g√∂rev 'completed' olarak g√ºncellendiƒüinde, EPATS Evrak No ve dok√ºman varsa
 * t√ºm i≈ü tipleri i√ßin ge√ßerli olan genel bir m√ºvekkil bildirimi olu≈üturur.
 */
// functions/index.js

// ... (diƒüer kodlarƒ±nƒ±z)

// functions/index.js i√ßindeki fonksiyonun g√ºncellenmi≈ü hali

exports.createUniversalNotificationOnTaskComplete = functions.firestore
  .document("tasks/{taskId}")
  .onUpdate(async (change, context) => {
    const taskId = context.params.taskId;
    console.log(`--- FONKSƒ∞YON TETƒ∞KLENDƒ∞: tasks/${taskId} ---`);

    const taskDataBefore = change.before.data();
    const taskDataAfter = change.after.data();

    // Status deƒüi≈üimini kontrol et
    const isStatusChangedToCompleted = taskDataBefore.status !== "completed" && taskDataAfter.status === "completed";

    // EPATS dok√ºmanƒ±nƒ± kontrol et
    const epatsDoc = taskDataAfter.details?.epatsDocument || null;
    const hasEpatsData = !!epatsDoc;

    // √ñnceki durum "completed" deƒüil mi? (herhangi ba≈üka bir stat√º)
    const wasPreviouslyNotCompleted = taskDataBefore.status !== "completed";

    console.log(`Durum 'completed' olarak mƒ± deƒüi≈üti?: ${isStatusChangedToCompleted}`);
    console.log(`EPATS dok√ºmanƒ± var mƒ±?: ${hasEpatsData}`);
    console.log(`√ñnceki durum 'completed' deƒüil miydi?: ${wasPreviouslyNotCompleted}`);

    if (isStatusChangedToCompleted && hasEpatsData && wasPreviouslyNotCompleted) {
      console.log("--> KO≈ûULLAR SAƒûLANDI. Bildirim olu≈üturma i≈ülemi ba≈ülƒ±yor.");

      try {
        // 1. KURALI BUL
        const rulesSnapshot = await db.collection("template_rules")
          .where("sourceType", "==", "task_completion_epats")
          .limit(1)
          .get();

        if (rulesSnapshot.empty) {
          console.error("HATA: 'task_completion_epats' i√ßin bir kural bulunamadƒ±!");
          return null;
        }
        const rule = rulesSnapshot.docs[0].data();
        console.log(`Kural bulundu. ≈ûablon ID: ${rule.templateId}`);

        // 2. Mail ≈ûablonunu ve M√ºvekkil Bilgilerini Al
        const templateSnapshot = await db.collection("mail_templates").doc(rule.templateId).get();
        if (!templateSnapshot.exists) {
          console.error(`Hata: ${rule.templateId} ID'li mail ≈üablonu bulunamadƒ±!`);
          return null;
        }
        const template = templateSnapshot.data();

        const ipRecordSnapshot = await db.collection("ipRecords").doc(taskDataAfter.relatedIpRecordId).get();
        if (!ipRecordSnapshot.exists) {
          console.error(`Hata: G√∂revle ili≈ükili IP kaydƒ± (${taskDataAfter.relatedIpRecordId}) bulunamadƒ±!`);
          return null;
        }
        const ipRecord = ipRecordSnapshot.data();

        const primaryOwnerId = ipRecord.owners?.[0]?.id;
        if (!primaryOwnerId) {
          console.error('IP kaydƒ±na atanmƒ±≈ü birincil hak sahibi bulunamadƒ±.');
          return null;
        }
        const clientSnapshot = await db.collection("persons").doc(primaryOwnerId).get();
        const client = clientSnapshot.data();

        // 3. PARAMETRELERƒ∞ DOLDUR
        const parameters = {
          muvekkil_adi: client.name,
          is_basligi: taskDataAfter.title,
          epats_evrak_no: epatsDoc.turkpatentEvrakNo || "",
          basvuru_no: ipRecord.applicationNumber || "",
        };

        let subject = template.subject.replace(/{{(.*?)}}/g, (match, p1) => parameters[p1.trim()] || match);
        let body = template.body.replace(/{{(.*?)}}/g, (match, p1) => parameters[p1.trim()] || match);

        // 4. MAIL Bƒ∞LDƒ∞Rƒ∞Mƒ∞Nƒ∞ OLU≈ûTUR
        await db.collection("mail_notifications").add({
          recipientEmail: client.email,
          clientId: primaryOwnerId,
          subject: subject,
          body: body,
          status: "pending",
          sourceTaskId: taskId,
          createdAt: admin.firestore.FieldValue.serverTimestamp(),
        });

        console.log("--> BA≈ûARILI: Bildirim 'mail_notifications' koleksiyonuna eklendi.");
        return null;

      } catch (error) {
        console.error("HATA: Bildirim olu≈üturma bloƒüunda bir hata olu≈ütu:", error);
        return null;
      }
    } else {
      console.log("--> KO≈ûULLAR SAƒûLANMADI. Fonksiyon sonlandƒ±rƒ±lƒ±yor.");
      return null;
    }
  });
// üåü SMTP transporter
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "kubilayguzel@evrekapatent.com",
    pass: "rqvl tpbm vkmu lmxi" // Google'dan aldƒ±ƒüƒ±n uygulama ≈üifresini buraya koy
  }
});

/**
 * mail_notifications koleksiyonundaki bir bildirimi SMTP √ºzerinden g√∂nderir.
 * √ñn y√ºzden √ßaƒürƒ±lƒ±r.
 */
exports.sendEmailNotification = functions.https.onCall(async (data, context) => {
  const { notificationId } = data;

  if (!notificationId) {
    throw new functions.https.HttpsError("invalid-argument", "notificationId parametresi zorunludur.");
  }

  // Firestore'dan bildirimi al
  const notificationRef = db.collection("mail_notifications").doc(notificationId);
  const notificationDoc = await notificationRef.get();

  if (!notificationDoc.exists) {
    throw new functions.https.HttpsError("not-found", "Bildirim bulunamadƒ±.");
  }

  const notificationData = notificationDoc.data();

  const mailOptions = {
    from: `"IP Manager" <kubilayguzel@evrekapatent.com>`,
    to: notificationData.recipientEmail,
    subject: notificationData.subject,
    html: notificationData.body
  };

  try {
    console.log("SMTP √ºzerinden g√∂nderim ba≈ülƒ±yor...");
    await transporter.sendMail(mailOptions);

    console.log(`E-posta ba≈üarƒ±yla g√∂nderildi: ${notificationData.recipientEmail}`);
    await notificationRef.update({
      status: "sent",
      sentAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });

    return { success: true, message: "E-posta ba≈üarƒ±yla g√∂nderildi." };
  } catch (error) {
    console.error("SMTP g√∂nderim hatasƒ±:", error);
    await notificationRef.update({
      status: "failed",
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      errorInfo: error.message
    });

    throw new functions.https.HttpsError("internal", "E-posta g√∂nderilirken bir hata olu≈ütu.", error.message);
  }
  });

exports.processTrademarkBulletinUpload = functions
  .runWith({
    timeoutSeconds: 300, // 5 dakika zaman a≈üƒ±mƒ±
    memory: "1GB", // 1GB bellek
  })
  .storage.object()
  .onFinalize(async (object) => {
    // console.log("Fonksiyon ba≈ülangƒ±cƒ±, object:", JSON.stringify(object)); // Fonksiyon ba≈ülangƒ±cƒ±nƒ± loglayƒ±n

    const bucket = admin.storage().bucket(object.bucket); // Firebase Admin SDK'dan bucket alƒ±nƒ±mƒ±
    const filePath = object.name;
    const fileName = path.basename(filePath);

    console.log(`Yeni dosya y√ºklendi: ${fileName}`);

    // Sadece ZIP dosyalarƒ±nƒ± i≈üle
    if (!fileName.endsWith(".zip")) {
      console.log("ZIP dosyasƒ± deƒüil, i≈ülem yapƒ±lmadƒ±.");
      return null;
    }

    // Ge√ßici dosya ve dizin yollarƒ±
    const tempFilePath = path.join(os.tmpdir(), fileName);
    const extractTargetDir = path.join(os.tmpdir(), `extract_${Date.now()}`);

    try {
      // √áƒ±karma klas√∂r√ºn√º olu≈ütur
      fs.mkdirSync(extractTargetDir, { recursive: true });
      console.log(`√áƒ±karma klas√∂r√º olu≈üturuldu: ${extractTargetDir}`);

      // ZIP dosyasƒ±nƒ± Cloud Storage'dan ge√ßici dizine indir
      await bucket.file(filePath).download({ destination: tempFilePath });
      console.log(`ZIP dosyasƒ± indirildi: ${tempFilePath}`);

      // ZIP dosyasƒ±nƒ± √ßƒ±kar
      const zip = new AdmZip(tempFilePath);
      zip.extractAllTo(extractTargetDir, true); // 'true' ile √ºzerine yazma izni verilir
      console.log("ZIP dosyasƒ± √ßƒ±karƒ±ldƒ±.");

      // --- Dizin ƒ∞√ßeriƒüi Kontrol√º (Hala kritik) ---
      console.log("--- √áƒ±karƒ±lan Dizin ƒ∞√ßeriƒüi Kontrol√º ---");
      try {
        const extractedContents = fs.readdirSync(extractTargetDir);
        console.log(`EXTRACT_DIR: ${extractTargetDir}`);
        console.log(`DOSYA Sƒ∞STEMƒ∞NDEKƒ∞ √áIKARILAN √ñƒûE SAYISI: ${extractedContents.length}`);
        if (extractedContents.length > 0) {
          console.log("ƒ∞LK 5 √áIKARILAN √ñƒûE:", extractedContents.slice(0, 5));
        } else {
          console.log("√áIKARILAN Dƒ∞Zƒ∞N BO≈û. ZIP ƒ∞≈ûLEMƒ∞NDE SORUN OLABƒ∞Lƒ∞R.");
        }
      } catch (dirReadError) {
        console.error(`Dizin i√ßeriƒüi okunurken KRƒ∞Tƒ∞K HATA: ${dirReadError.message}`);
      }
      console.log("------------------------------------------");

      // T√ºm dosyalarƒ± ve alt dizinleri listeleyen yardƒ±mcƒ± fonksiyonu kullan
      const allFiles = listAllFilesRecursive(extractTargetDir);
      console.log(`listAllFilesRecursive TOPLAM DOSYA SAYISI: ${allFiles.length}`);
      if (allFiles.length > 0) {
          console.log("listAllFilesRecursive ƒ∞LK 5 DOSYA YOLU:", allFiles.slice(0, 5));
      } else {
          console.log("allFiles dizisi listAllFilesRecursive tarafƒ±ndan BO≈û d√∂nd√ºr√ºld√º.");
      }
      console.log("------------------------------------------");


      // ADIM 1: bulletin.inf veya bulletin dosyasƒ±nƒ± bul
      console.log("[ADIM 1] bulletin.inf veya bulletin dosyasƒ± aranƒ±yor...");
      const bulletinInfPath = allFiles.find((p) =>
        ["bulletin.inf", "bulletin"].includes(path.basename(p).toLowerCase())
      );

      if (!bulletinInfPath) {
        console.error(`bulletin.inf veya bulletin bulunamadƒ±. allFiles i√ßeriƒüi (basename): ${JSON.stringify(allFiles.map(f => path.basename(f)))}`);
        throw new Error("bulletin.inf veya bulletin dosyasƒ± bulunamadƒ±.");
      }

      console.log(`[ADIM 1 BA≈ûARILI] B√ºlten dosyasƒ± bulundu: ${bulletinInfPath}`);

      const bulletinContent = fs.readFileSync(bulletinInfPath, "utf8");

      const noMatch = bulletinContent.match(/NO\s*=\s*(.*)/);
      const dateMatch = bulletinContent.match(/DATE\s*=\s*(.*)/);

      const bulletinNo = noMatch ? noMatch[1].trim() : "Unknown";
      const bulletinDate = dateMatch ? dateMatch[1].trim() : "Unknown";

      console.log(`B√ºlten No: ${bulletinNo}, Tarih: ${bulletinDate}`);

      const bulletinRef = await admin.firestore().collection("trademarkBulletins").add({
        bulletinNo,
        bulletinDate,
        type: "marka",
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
      });
      const bulletinId = bulletinRef.id;
      console.log(`Firestore b√ºlten kaydƒ± olu≈üturuldu: ${bulletinId}`);

      // ADIM 2: tmbulletin dosyasƒ±nƒ± bul
      console.log("[ADIM 2] tmbulletin dosyasƒ± aranƒ±yor...");
      const scriptFilePath = allFiles.find((p) =>
        ["tmbulletin.log"].includes(path.basename(p).toLowerCase())
      );

      if (!scriptFilePath) {
        console.error(`tmbulletin bulunamadƒ±. allFiles i√ßeriƒüi (basename): ${JSON.stringify(allFiles.map(f => path.basename(f)))}`);
        throw new Error("tmbulletin dosyasƒ± bulunamadƒ±.");
      }

      console.log(`[ADIM 2 BA≈ûARILI] tmbulletin bulundu: ${scriptFilePath}`);
      const scriptContent = fs.readFileSync(scriptFilePath, "utf8");

      const records = parseScriptContent(scriptContent); // parseScriptContent fonksiyonu a≈üaƒüƒ±da g√ºncellendi
      console.log(`Toplam ${records.length} kayƒ±t parse edildi.`);

      const imageFiles = allFiles.filter((p) =>
        /\.(jpg|jpeg|png)$/i.test(p)
      );

      const batch = admin.firestore().batch();
      let uploadedImageCount = 0;

      for (const record of records) {
        let imagePath = null;

        if (record.applicationNo) {
          // Resim dosyasƒ± arama mantƒ±ƒüƒ±nƒ± g√º√ßlendiriyoruz: 2024/12345 -> 2024-12345 veya 2024_12345
          const normalizedAppNo = record.applicationNo.replace(/\//g, "-"); // Hem "/" hem de "_" i√ßin deneyebiliriz
          const alternativeAppNo = record.applicationNo.replace(/\//g, "_");

          const imageFile = imageFiles.find((f) => {
            const lowerF = f.toLowerCase();
            return lowerF.includes(normalizedAppNo) || lowerF.includes(alternativeAppNo);
          });
          
          if (imageFile) {
            const destFileName = `bulletins/${bulletinId}/${path.basename(imageFile)}`;
            console.log(`Resim y√ºkleniyor: ${destFileName}`);
            await bucket.upload(imageFile, {
              destination: destFileName,
              metadata: {
                contentType: getContentType(imageFile),
              },
            });
            imagePath = destFileName;
            uploadedImageCount++;
          } else {
              console.warn(`Resim dosyasƒ± bulunamadƒ± for applicationNo: ${record.applicationNo} (arananlar: ${normalizedAppNo}, ${alternativeAppNo})`);
          }
        }

        // !!! FIRESTORE'A G√ñNDERƒ∞LECEK VERƒ∞Nƒ∞N LOGLARI BA≈ûLANGICI !!!
        console.log("------------------------------------------");
        console.log("Firestore'a yazƒ±lacak Record (batch.set √∂ncesi):");
        const docData = {
          bulletinId,
          applicationNo: record.applicationNo ?? null,
          applicationDate: record.applicationDate ?? null,
          markName: record.markName ?? null,
          niceClasses: record.niceClasses ?? null,
          holders: record.holders ?? [],
          goods: record.goods ?? [],
          extractedGoods: record.extractedGoods ?? [],
          attorneys: record.attorneys ?? [],
          imagePath: imagePath ?? null, // imagePath'in null veya string olduƒüundan emin ol
        };
        console.log(JSON.stringify(docData, null, 2)); // 2 bo≈üluk bƒ±rakarak formatlƒ± √ßƒ±ktƒ±
        console.log("------------------------------------------");
        // !!! FIRESTORE'A G√ñNDERƒ∞LECEK VERƒ∞Nƒ∞N LOGLARI SONU !!!

        const docRef = admin.firestore().collection("trademarkBulletinRecords").doc();
        batch.set(docRef, docData); // Hazƒ±rladƒ±ƒüƒ±mƒ±z docData nesnesini g√∂nderiyoruz
      }

      await batch.commit();
      console.log(`Firestore'a kayƒ±tlar eklendi. ${uploadedImageCount} resim y√ºklendi.`);

    } catch (error) {
      console.error("ƒ∞≈ülem hatasƒ±:", error);
      throw error;
    } finally {
      try {
        if (fs.existsSync(tempFilePath)) fs.unlinkSync(tempFilePath);
        if (fs.existsSync(extractTargetDir)) fs.rmSync(extractTargetDir, { recursive: true, force: true });
        console.log("Ge√ßici dosyalar temizlendi.");
      } catch (cleanupError) {
        console.error("Temizlik hatasƒ±:", cleanupError);
      }
    }

    return null;
  });

// Yardƒ±mcƒ± Fonksiyonlar

function listAllFilesRecursive(dir) {
  let results = [];
  try {
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    for (const entry of entries) {
      const entryPath = path.join(dir, entry.name);
      if (entry.isDirectory()) {
        results = results.concat(listAllFilesRecursive(entryPath));
      } else {
        results.push(entryPath);
      }
    }
  } catch (e) {
    console.error(`listAllFilesRecursive hata: Dizin okunamadƒ± ${dir}: ${e.message}`);
    // Hata durumunda bo≈ü dizi d√∂nd√ºrerek uygulamanƒ±n √ß√∂kmesini engelleriz.
  }
  return results;
}

function parseScriptContent(content) {
    const recordsMap = {};

    // Bu regex, VALUES parantezinin i√ßindeki her bir string'i (tek tƒ±rnaklar i√ßindeki ifadeleri)
    // doƒüru bir ≈üekilde yakalamaya √ßalƒ±≈üƒ±r. Tƒ±rnak i√ßindeki virg√ºller veya diƒüer √∂zel karakterler
    // sorun yaratmayacaktƒ±r.
    const insertRegex = /INSERT INTO (\w+) VALUES\s*\((.*?)\)/gms;
    
    let match;
    let insertCount = 0;

    while ((match = insertRegex.exec(content)) !== null) {
        insertCount++;
        console.log(`--- INSERT IFADESƒ∞ ${insertCount} BA≈ûLANGICI ---`);
        console.log(`Ham Match: ${match[0].substring(0, Math.min(match[0].length, 200))}...`); // ƒ∞lk 200 karakteri g√∂ster
        
        const table = match[1].toUpperCase();
        const rawValuesString = match[2]; // √ñrn: 'val1','val2','val3'

        console.log(`Tablo: ${table}`);
        console.log(`Ham Deƒüerler (rawValuesString): ${rawValuesString}`);

        // Bu regex tek tƒ±rnaklar i√ßindeki her deƒüeri yakalar,
        // i√ßindeki escapelenmi≈ü tƒ±rnaklarƒ± ('') da doƒüru ≈üekilde ele alƒ±r.
        const valueRegex = /'(.*?)'(?:,|$)/g; // Tƒ±rnak i√ßindeki her ≈üeyi yakala
        const values = [];
        let valueMatch;
        while ((valueMatch = valueRegex.exec(rawValuesString)) !== null) {
            // Yakalanan deƒüeri al, escapelenmi≈ü tƒ±rnaklarƒ± (') geri √ßevir ve trimle
            const cleanedValue = valueMatch[1].replace(/''/g, "'").trim();
            // Bo≈ü stringleri null'a √ßevir, aksi takdirde cleanedValue'yu kullan
            values.push(cleanedValue === "" ? null : cleanedValue);
        }
        
        console.log("Ayrƒ±≈ütƒ±rƒ±lmƒ±≈ü Values Dizisi:", JSON.stringify(values, null, 2)); // T√ºm ayrƒ±≈ütƒ±rƒ±lmƒ±≈ü deƒüerleri formatlƒ± logla

        // applicationNo deƒüerini al ve null kontrol√º yap
        const appNo = values[0];

        if (!appNo) {
            console.warn(`Bo≈ü veya null applicationNo deƒüeri bulundu, bu INSERT ifadesi atlandƒ±. Tablo: ${table}, Ham Deƒüerler: ${rawValuesString}`);
            console.log(`--- INSERT IFADESƒ∞ ${insertCount} SONU ---`);
            continue;
        }

        // Eƒüer kayƒ±t recordsMap'te yoksa yeni bir kayƒ±t olu≈ütur
        if (!recordsMap[appNo]) {
          recordsMap[appNo] = {
            applicationNo: appNo,
            applicationDate: null,
            markName: null,
            niceClasses: null,
            holders: [],
            goods: [],
            extractedGoods: [],
            attorneys: [],
          };
          console.log(`Yeni kayƒ±t olu≈üturuldu: applicationNo=${appNo}`);
        }

        // Tablo tipine g√∂re deƒüerleri ilgili alanlara ata
        if (table === "TRADEMARK") {
          recordsMap[appNo].applicationDate = values[1] ?? null;
          recordsMap[appNo].markName = values[5] ?? null; // '\u015fekil' gibi Unicode deƒüerler JS tarafƒ±ndan otomatik d√∂n√º≈üt√ºr√ºlmeli
          recordsMap[appNo].niceClasses = values[6] ?? null;
          console.log(`TRADEMARK verisi eklendi. applicationDate: ${recordsMap[appNo].applicationDate}, markName: ${recordsMap[appNo].markName}`);
        }
        else if (table === "HOLDER") {
          // values[3] - values[6] arasƒ± adres satƒ±rlarƒ± olabilir
          const addressParts = [values[3], values[4], values[5], values[6]]
                                .filter(Boolean) // null veya bo≈ü stringleri filtrele
                                .map(s => s.replace(/\\u000a/g, ' ').trim()); // \u000a'larƒ± bo≈ülukla deƒüi≈ütir ve trimle
          
          const holderAddress = addressParts.join(", ") || null; // Bo≈üsa null yap

          recordsMap[appNo].holders.push({
            name: values[2] ?? null,
            address: holderAddress, 
            country: values[7] ?? null,
          });
          console.log(`HOLDER verisi eklendi. Name: ${values[2]}, Adres: ${holderAddress}`);
        }
        else if (table === "GOODS") {
          recordsMap[appNo].goods.push(values[3] ?? null);
          console.log(`GOODS verisi eklendi: ${values[3]}`);
        }
        else if (table === "EXTRACTEDGOODS") {
          recordsMap[appNo].extractedGoods.push(values[3] ?? null);
          console.log(`EXTRACTEDGOODS verisi eklendi: ${values[3]}`);
        }
        else if (table === "ATTORNEY") {
          recordsMap[appNo].attorneys.push(values[2] ?? null);
          console.log(`ATTORNEY verisi eklendi: ${values[2]}`);
        }
        else {
            console.warn(`Bilinmeyen tablo tipi bulundu: ${table}. Ham deƒüerler: ${rawValuesString}`);
        }
        console.log(`--- INSERT IFADESƒ∞ ${insertCount} SONU ---`);
      }
      console.log("Parseleme tamamlandƒ±. Olu≈üturulan kayƒ±t sayƒ±sƒ±:", Object.values(recordsMap).length);
      return Object.values(recordsMap);
}

function parseValues(line) {
  // Bu fonksiyon parseScriptContent i√ßinde kullanƒ±lmƒ±yor gibi g√∂r√ºn√ºyor.
  // Eƒüer ba≈üka bir yerde kullanƒ±lƒ±yorsa, burada da null/string d√∂n√º≈ü√ºmlerini g√∂zden ge√ßirmek faydalƒ± olabilir.
  const inside = line.substring(line.indexOf("(") + 1, line.lastIndexOf(")"));
  const raw = inside.split("','").map((s) => s.replace(/^'/, "").replace(/'$/, ""));
  return raw.map((s) => s.replace(/''/g, "'"));
}

function getContentType(filePath) {
  if (/\.png$/i.test(filePath)) return "image/png";
  if (/\.jpe?g$/i.test(filePath)) return "image/jpeg";
  return "application/octet-stream";
}